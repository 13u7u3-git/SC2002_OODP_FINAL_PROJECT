Here is a comprehensive extraction of **all classes, attributes, and methods** from your UML XML file, formatted as:

**Class | attribute list | method list**
(Attributes and methods are listed exactly as in your diagram, including visibility and types.)[1]

---

**User (abstract)**
Attributes:
- name: String
- nric: String
- password: String
- age: int
- maritalStatus: MaritalStatus
- filterSettings: UserFilterSetting

Methods:
- changePassword(): void
- displayMenu(): void

---

**Applicant**
Attributes:
- applicationList: List
- bookedFlatType: FlatType
- enquiryList: List

Methods:
- addApplication(Application): void
- addEnquiry(Enquiry): void
- displayMenu(): void

---

**Manager**
Attributes:
- currentAssignedProject: Project
- assignedProjectList: List

Methods:
- addAssignedProject(Project): void
- displayMenu(): void

---

**Officer**
Attributes:
- currentAssignedProject: Project
- assignedProjectList: List
- registrationFormList: List

Methods:
- addAssignedProject(Project): void
- addRegistrationForm(RegistrationForm): void
- displayMenu(): void

---

**Project**
Attributes:
- id: int
- name: String
- neighbourhood: String
- availableFlats: Map
- applicationOpeningDate: LocalDate
- applicationClosingDate: LocalDate
- manager: Manager
- visibility: boolean
- availableOfficerSlots: int
- officerList: List
- registrationFormList: List
- applicationList: List
- enquiryList: List

Methods:
- addOfficer(Officer): void
- addRegistrationForm(RegistrationForm): void
- addApplication(Application): void
- addEnquiry(Enquiry): void

---

**Enquiry**
Attributes:
- id: int
- project: Project
- applicant: User
- message: String
- dateEnquired: LocalDate
- replyList: List

Methods:
- addReply(Reply): void

---

**Reply**
Attributes:
- id: int
- message: String
- respondent: User
- dateReplied: LocalDate

Methods:
(none listed)

---

**BTO_ApplicationSystem**
Attributes:
(none listed)

Methods:
- main(args: String[]): void
- displayMainMenu(): void

---

**SessionManager (static)**
Attributes:
- currentUser: User
- applicants: Map
- officers: Map
- managers: Map
- projectRegistry: ProjectRegistry

Methods:
- initializeData(): void
- saveDataOnExit(): boolean
- authenticateUser(String nric, String password, Map applicants, Map officers, Map managers): boolean
- getCurrentUser(): User
- getCurrentUserType(): UserType
- logout(): boolean

---

**ProjectRegistry**
Attributes:
- projectList: List

Methods:
- addProject(Project): void
- getEligibleProjects(User): List

---

**Application**
Attributes:
- id: int
- applicant: User
- project: Project
- flatType: FlatType
- applicationStatus: ApplicationStatus
- withdrawalStatus: WithdrawalStatus
- bookingStatus: BookingStatus
- dateApplied: LocalDate

Methods:
(none listed)

---

**ApplicantService (singleton)**
Attributes:
(none listed)

Methods:
- viewEligibleProjects(User): void
- createApplication(): Application
- submitApplication(Application): void
- viewApplicationStatus(Application): void
- viewProjectAppliedFor(Application): void
- withdrawApplication(Application): void
- sendBookingRequest(Application): void
- updateBookingStatus(Application, BookingStatus): void
- viewAllProjects(): void

---

**EnquiryService (singleton)**
Attributes:
(none listed)

Methods:
- createEnquiry(Project, User, String): Enquiry
- submitEnquiry(Enquiry): void
- viewEnquiry(Enquiry): void
- editEnquiry(Enquiry, String): void
- deleteEnquiry(Enquiry): void
- replyToEnquiry(Enquiry, String, User): void
- getEnquiriesByProject(Project): List
- getEnquiriesAllProject(): List
- viewEnquiries(List): void

---

**ProjectService (singleton)**
Attributes:
(none listed)

Methods:
- isApplicationOpen(Project): boolean
- isOfficerFreeSlotAvailable(Project): boolean
- addApplicationToProject(Application): Boolean
- addEnquiryToProject(Enquiry): void
- removeEnquiryFromProject(Enquiry): void
- addOfficerRegReqToProject(RegistrationForm): void

---

**OfficerService (singleton)**
Attributes:
(none listed)

Methods:
- createRegistrationForm(): RegistrationForm
- sendRegistrationRequest(RegistrationForm): Boolean
- viewRegistrationStatus(RegistrationForm): void
- updateFlatAvailability(Project, FlatType, int): void
- processFlatBooking(Application): void
- retrieveApplicantsDetails(Application): void
- updateApplicationStatus(Application, ApplicationStatus): void
- updateApplicantProfile(FlatType): void
- generateReceipt(Application): void
- viewAllProjects(): void

---

**RegistrationForm**
Attributes:
- id: int
- officer: Officer
- project: Project
- registrationStatus: RegistrationStatus
- dateApplied: LocalDate

Methods:
(none listed)

---

**ManagerService (singleton)**
Attributes:
(none listed)

Methods:
- updateHandlingProject(Project): void
- showHandlingProjectStats(): void
- createProject(Manager): Project
- editProject(Project): void
- setVisible(Project, Boolean): void
- deleteProject(Project): void
- viewAllOfficerRegn(Project): void
- processOfficerRegn(RegistrationForm, Manager): void
- viewAllPendingAppln(Project): void
- processAppn(Application, Manager): void
- viewAllWithdrawlRequests(Project): void
- processWithdrawlReq(Application, Manager): void
- getFilteredProjects(Manager): List
- generateReport(Project): void
- viewAllEnquiriesOfAllProjects(): void
- viewAllProjects(): void

---

**UniqueID (singleton)**
Attributes:
- nextNewProjectId: int
- nextNewApplicationId: int
- nextNewRegistrationId: int
- nextEnquiryId: int
- nextReplyId: int

Methods:
(none listed)

---

**UserFilterSetting**
Attributes:
- name: String
- neighbourhood: String
- flatType: FlatType
- applicationOpeningDate: LocalDate
- applicationClosingDate: LocalDate
- sortOrder: String

Methods:
- reset(): void

---[1]: Source: xml.txt

Citations:
[1] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/12727935/d6519129-a2c7-4670-8af6-92b10c6d2252/xml.txt

---
Answer from Perplexity: pplx.ai/share